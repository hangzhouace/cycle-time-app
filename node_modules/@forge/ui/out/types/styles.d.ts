export interface MethodValue<T> {
    method: string;
    value: T;
}
export interface AllowedPrimitives {
    animationName?: string;
    animationDuration?: string;
    animationIterations?: string;
    animationDirection?: string;
    animationDelay?: string;
    padding?: string;
    paddingTop?: string;
    paddingRight?: string;
    paddingBottom?: string;
    paddingLeft?: string;
    margin?: string;
    marginTop?: string;
    marginRight?: string;
    marginBottom?: string;
    marginLeft?: string;
    fontWeight?: string;
    display?: string;
    alignContent?: string;
    alignItems?: string;
    alignSelf?: string;
    flexBasis?: string;
    flexDirection?: string;
    flexGrow?: string;
    flexShrink?: string;
    flexWrap?: string;
    justifyContent?: string;
    width?: string;
    height?: string;
    maxWidth?: string;
    maxHeight?: string;
    color?: ColorType;
    background?: string;
    backgroundColor?: ColorType;
    backgroundGradient?: MethodValue<GradientValue>;
    borderRadius?: string;
    boxShadow?: MethodValue<ShadowValue> | MethodValue<ShadowValue>[];
    transitionDelay?: string;
    transitionDuration?: string;
    transitionProperty?: string;
    transitionFunction?: string;
    fontSize?: string;
    lineHeight?: string;
    textAlign?: string;
    letterSpacing?: string;
    borderWidth?: string;
    borderTopWidth?: string;
    borderRightWidth?: string;
    borderBottomWidth?: string;
    borderLeftWidth?: string;
    borderStyle?: string;
    borderTopStyle?: string;
    borderRightStyle?: string;
    borderBottomStyle?: string;
    borderLeftStyle?: string;
    borderColor?: ColorType;
    outlineWidth?: string;
    outlineStyle?: string;
    outlineColor?: ColorType;
    boxSizing?: string;
    textShadow?: string;
    transform?: MethodValue<TransformValue>[];
    __hover?: AllowedPrimitives;
    __focus?: AllowedPrimitives;
    __active?: AllowedPrimitives;
    __keyframes?: MethodValue<KeyframesValue[]>;
}
export interface Frame {
    percent: string;
    primitives: AllowedPrimitives;
}
export interface KeyframesValue {
    key: string;
    frames: Frame[];
}
export interface Definitions {
    [key: string]: AllowedPrimitives;
}
export interface RGBAColorValue {
    r: number;
    g: number;
    b: number;
    a?: number;
}
export declare type ColorType = string | MethodValue<RGBAColorValue>;
export declare type GradientValue = {
    degrees?: string;
    colors: {
        percent: string;
        value: ColorType;
    }[];
    type: 'linear' | 'radial';
};
export interface ShadowValue {
    offsets: string;
    color: ColorType;
}
export interface TransformValue {
    x?: string;
    y?: string;
    z?: string;
    degrees?: string;
}
export interface StyleProps {
    style?: AllowedPrimitives;
}
//# sourceMappingURL=styles.d.ts.map